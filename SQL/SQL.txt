
//Docs
    https://www.w3schools.com/sql/



===================================================================


# Statements and retrieving table

- The asterisk or star symbol (*) means all columns.

SELECT * FROM <table name>;
SELECT * FROM books;



# Retrieving singles columns 

SELECT <column name> FROM <table name>;             
SELECT <column name 1>, <column name 2>, ... FROM <table name>;     #multiple columns
SELECT name, description, price FROM products;



======================================================================


# Categorizing Your Output with ‘AS’

- The key word AS will transform the column name to uppercase.
- Also you can rewrite the name of the column as you wish putting the new name between quotes. (Change the value of the column header presented)

SELECT <column name> AS <alias> FROM <table name>;
SELECT <column name> <alias> FROM <table name>;
SELECT username AS Username, first_name AS "First Name" FROM users;
SELECT title AS Title, year AS "Year Released" FROM movies;



======================================================================


# Searching Tables with “WHERE”


- A WHERE Clause is used as condition, so it will only shows if the condition is met
- The equality operator “=“ is strict, meaning is case sensitive.
- If we want to call everything that is expect the information typed, we just need an exclamation point “!” in front of the equality operator. (!=)

SELECT <columns> FROM <table> WHERE <condition>;
SELECT * FROM contacts WHERE first_name = "Andrew";



======================================================================


# Filtering by comparing values


    The not equal to or inequality operator can be written in two ways != and <>. The latter is less common.
    < less than
    <= less than or equal to
    > greater than
    >= greater than or equal to

SELECT * FROM contacts WHERE first_name != "Kenneth";
SELECT <columns> FROM <table> WHERE <column name> < <value>;
SELECT <columns> FROM <table> WHERE <column name> <= <value>;
SELECT <columns> FROM <table> WHERE <column name> > <value>;
SELECT <columns> FROM <table> WHERE <column name> >= <value>;

SELECT first_name, last_name FROM users WHERE date_of_birth < '1998-12-01';
SELECT title AS "Book Title", author AS Author FROM books WHERE year_released <= 2015;
SELECT name, description FROM products WHERE price > 9.99;
SELECT title FROM movies WHERE release_year >= 2000;


# Filtering by multiple conditions

- you can test rows of information against multiple conditions. You can choose whether you retrieve rows that match both of your conditions or either of them.

- You can compare multiple values in a WHERE condition. If you want to test that both conditions are true use the AND keyword, or either conditions are true use the OR keyword.

SELECT <columns> FROM <table> WHERE <condition 1> AND <condition 2> ...;
SELECT <columns> FROM <table> WHERE <condition 1> OR <condition 2> ...;
SELECT username FROM users WHERE last_name = "Garcia" AND first_name = "Andrew";
SELECT * FROM products WHERE category = "Games Consoles" AND price < 400;


# Filtering by Dates

- Filtering results by date can be handy for finding entries before or after a specific date

SELECT <columns> FROM <table> WHERE <column name> < <value>;
SELECT <columns> FROM <table> WHERE <column name> <= <value>;
SELECT first_name, last_name FROM users WHERE date_of_birth < '1998-12-01';
SELECT title AS "Book Title", author AS Author FROM books WHERE year_released <= 2015;



=======================================================================


# Searching Within a Set of Values

SELECT <columns> FROM <table> WHERE <column> IN (<value 1>, <value 2>, ...);
SELECT name FROM islands WHERE id IN (4, 8, 15, 16, 23, 42);
SELECT * FROM products WHERE category IN ("eBooks", "Books", "Comics");

SELECT <columns> FROM <table> WHERE <column>  NOT IN (<value 1>, <value 2>, ...);
SELECT answer FROM answers WHERE id IN (7, 42);
SELECT * FROM products WHERE category NOT IN ("Electronics");


# Searching within a range of Values

- Again, writing shorter queries can help with readability and tracking down mistakes in our SQL code. 

SELECT <columns> FROM <table> WHERE <column> BETWEEN <lesser value> AND <greater value>;
SELECT * FROM movies WHERE release_year BETWEEN 2000 AND 2010;
SELECT name, description FROM products WHERE price BETWEEN 9.99 AND 19.99;



======================================================================


# Finding Data that matches a Pattern

- Placing the percent symbol (%) any where in a string in conjunction with the LIKE keyword will operate as a wildcard. Meaning it can be substituted by any number of characters, including zero!

- A wild card is a substitute character used when you don’t know the rest of the text. 

- It can be placed anywhere in your search to help find different things.

- In SQL the % can be any number even 0. Also if you don’t now the capitalization, you can use % as a wild card

SELECT <columns> FROM <table> WHERE <column> LIKE <pattern>;
SELECT title FROM books WHERE title LIKE "Harry Potter%Fire";
SELECT title FROM movies WHERE title LIKE "Alien%";


# Filtering Out or Finding Missing Information 

- A missing value is known as a null value, but since it can’t be used with equality operator, we use it with IS key word.

- Or to select those that are not NULL, we use  IS NOT NULL

SELECT <columns> FROM <table> WHERE <column> IS NULL
SELECT <columns> FROM <table> WHERE <column> IS NOT NULL



===================================================================


# Adding a row to a table 

    //Inserting a single row:
INSERT INTO <table> VALUES (<value 1>, <value 2>, ...);
            # This will insert values in the order of the columns prescribed in the schema.

INSERT INTO users VALUES  (1, "chalkers", "Andrew", "Chalkley");
INSERT INTO users VALUES  (2, "ScRiPtKiDdIe", "Kenneth", "Love");

    //Inserting a single row with values in any order:

INSERT INTO <table> (<column 1>, <column 2>) VALUES (<value 1>, <value 2>);
INSERT INTO <table> (<column 2>, <column 1>) VALUES (<value 2>, <value 1>);

INSERT INTO users (username, first_name, last_name) VALUES ("chalkers", "Andrew", "Chalkley");


# Adding multiple rows to a table

    //Inserting multiple rows in a single statement:

INSERT INTO <table> (<column 1>, <column 2>, ...) 
             VALUES 
                    (<value 1>, <value 2>, ...),
                    (<value 1>, <value 2>, ...),
                    (<value 1>, <value 2>, ...);

INSERT INTO users (username, first_name, last_name) 
    VALUES 
                  ("chalkers", "Andrew", "Chalkley"),
                  ("ScRiPtKiDdIe", "Kenneth", "Love");



===================================================================


# Update all rows or columns in a table 

    // An update statement for all rows:

UPDATE <table> SET <column> = <value>;
            # The "=" sign is different from an equality operator from a WHERE condition. It's an assignment operator because you're assigning a new value to something.

UPDATE users SET password = "thisisabadidea";
UPDATE products SET price = 2.99;

    // Update multiple columns in all rows:

UPDATE <table> SET <column 1> = <value 1>, <column 2> = <value 2>;
Examples:

UPDATE users SET first_name = "Anony", last_name = "Moose";
UPDATE products SET stock_count = 0, price = 0;


# Updating Specific Rows

    // An update statement for specific rows:

UPDATE <table> SET <column> = <value> WHERE <condition>;

UPDATE users SET password = "thisisabadidea" WHERE id = 3;
UPDATE blog_posts SET view_count = 1923 WHERE title = "SQL is Awesome";


    // Update multiple columns for specific rows:

UPDATE <table> SET <column 1> = <value 1>, <column 2> = <value 2> WHERE <condition>;
UPDATE users SET entry_url = "/home", last_login = "2016-01-05" WHERE id = 329;



====================================================================


# Removing Data From All Rows in a Table

    // To delete all rows from a table:
DELETE FROM <table>;

DELETE FROM logs;
DELETE FROM users;
DELETE FROM products;

        # It’s important to know that you can’t undo this. Without a backup of your data, once you do this, you lose all information.


# Removing Specific Rows

    // To delete specific rows from a table:

DELETE FROM <table> WHERE <condition>;

DELETE FROM users WHERE email = "andrew@teamtreehouse.com";
DELETE FROM movies WHERE genre = "Musical";
DELETE FROM products WHERE stock_count = 0;



====================================================================

Transactions

Definitions:
- Autocommit - every statement you write gets saved to disk.
- Seeding - populating a database for the first time.
- Script file - a file containing SQL statements.

SQL Used

Switch autocommit off and begin a transaction:
BEGIN TRANSACTION;

Or simply:
BEGIN;

To save all results of the statements after the start of the transaction to disk:
COMMIT;

// Check the picture


# Rolling Back from Transactions

To reset the state of the database to before the beginning of the transaction:
ROLLBACK;
